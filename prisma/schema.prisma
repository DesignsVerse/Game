// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String?  @unique
  phone        String?  @unique
  passwordHash String
  role         Role     @default(USER)
  status       Status   @default(ACTIVE)
  referralCode String   @unique
  referredBy   String? // direct referrer userId, optional
  createdAt    DateTime @default(now())

  // Relations
  wallet       Wallet?
  bets         Bet[]
  transactions Transaction[]
  withdrawals  Withdrawal[]
  adminActions AdminAction[] @relation("AdminUserActions")

  // Referrals (array side: no fields/references here)
  referralsGiven Referral[] @relation("ReferralsGiven") // as referrer
  referralsTaken Referral[] @relation("ReferralsTaken") // as referee

  @@index([createdAt])
  @@index([status])
  @@index([role])
}

model Wallet {
  id              String   @id @default(uuid())
  userId          String   @unique
  mainBalance     Float    @default(0)
  referralBalance Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String          @id @default(uuid())
  userId    String
  type      TransactionType
  amount    Float
  meta      Json?
  status    TxnStatus       @default(PENDING)   // âœ… new
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([type, createdAt])
}

model Round {
  id          String      @id @default(uuid())
  type        GameType
  startTime   DateTime
  endTime     DateTime
  resultColor Color?
  status      RoundStatus
  createdAt   DateTime    @default(now())

  bets Bet[]

  @@index([type, startTime])
  @@index([status, endTime])
}

model Bet {
  id          String    @id @default(uuid())
  userId      String
  roundId     String
  colorChoice Color
  amount      Float
  payout      Float?    @default(0)
  status      BetStatus
  createdAt   DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id])
  round Round @relation(fields: [roundId], references: [id])

  @@index([userId, createdAt])
  @@index([roundId])
  @@index([status])
}

model Referral {
  id               String   @id @default(uuid())
  referrerId       String
  refereeId        String
  level            Int
  commissionAmount Float
  sourceTxnId      String?
  createdAt        DateTime @default(now())

  // Single-side relation fields specify fields/references here
  referrer User @relation("ReferralsGiven", fields: [referrerId], references: [id])
  referee  User @relation("ReferralsTaken", fields: [refereeId], references: [id])

  @@index([referrerId])
  @@index([refereeId])
  @@index([level])
  @@index([createdAt])
}

model Withdrawal {
  id         String           @id @default(uuid())
  userId     String
  amount     Float
  status     WithdrawalStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  approvedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([status, createdAt])
}
model AdminAction {
  id         String   @id @default(uuid())
  adminId    String
  actionType String
  payload    Json?
  createdAt  DateTime @default(now())

  admin User @relation("AdminUserActions", fields: [adminId], references: [id])

  @@index([adminId, createdAt])
  @@index([actionType, createdAt])
}

enum Role {
  USER
  ADMIN
  FINANCE
}

enum Status {
  ACTIVE
  BLOCKED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  BET
  WIN
  REFERRAL_BONUS
  BONUS
  ADJUST
}

enum GameType {
  THIRTY_SEC
  ONE_MIN
  CUSTOM
}

enum Color {
  RABBIT
  TURTLE
  VIOLET
}

enum RoundStatus {
  OPEN
  LOCKED
  SETTLED
}

enum BetStatus {
  PLACED
  WON
  LOST
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}
enum TxnStatus {
  PENDING
  APPROVED
  REJECTED
}